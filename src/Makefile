# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/xxfs_dbproxy
pkgincludedir = $(includedir)/xxfs_dbproxy
pkglibdir = $(libdir)/xxfs_dbproxy
pkglibexecdir = $(libexecdir)/xxfs_dbproxy
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
sbin_PROGRAMS = xxfs_dbproxy$(EXEEXT)
subdir = src
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in sql-tokenizer.c
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(sbindir)"
PROGRAMS = $(sbin_PROGRAMS)
am_xxfs_dbproxy_OBJECTS = xxfs_dbproxy-xxfs_dbproxy.$(OBJEXT) \
	xxfs_dbproxy-network-mysqld.$(OBJEXT) \
	xxfs_dbproxy-network-mysqld-proto.$(OBJEXT) \
	xxfs_dbproxy-network-mysqld-proxy.$(OBJEXT) \
	xxfs_dbproxy-network-mysqld-server.$(OBJEXT) \
	xxfs_dbproxy-network-mysqld-table.$(OBJEXT) \
	xxfs_dbproxy-network-conn-pool.$(OBJEXT) \
	xxfs_dbproxy-network-socket.$(OBJEXT) \
	xxfs_dbproxy-sql-tokenizer.$(OBJEXT) \
	xxfs_dbproxy-glib-ext.$(OBJEXT) \
	xxfs_dbproxy-mysql_wrapper.$(OBJEXT) \
	xxfs_dbproxy-partition.$(OBJEXT) xxfs_dbproxy-sql-parser.$(OBJEXT) \
	xxfs_dbproxy-perf_monitor.$(OBJEXT) \
	xxfs_dbproxy-messages.$(OBJEXT) \
	xxfs_dbproxy-resultset_merge.$(OBJEXT)
xxfs_dbproxy_OBJECTS = $(am_xxfs_dbproxy_OBJECTS)
am__DEPENDENCIES_1 =
xxfs_dbproxy_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
am__skiplex = test -f $@ ||
LEXCOMPILE = $(LEX) $(LFLAGS) $(AM_LFLAGS)
YLWRAP = $(top_srcdir)/ylwrap
SOURCES = $(xxfs_dbproxy_SOURCES)
DIST_SOURCES = $(xxfs_dbproxy_SOURCES)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = aclocal-1.11
AMTAR = tar
AUTOCONF = autoconf
AUTOHEADER = autoheader
AUTOMAKE = automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O0
CPP = gcc -E
CPPFLAGS =  -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGE_FILES
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O0
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EVENT_LIBS = -levent
EXEEXT = 
GLIB_CFLAGS = -I/usr/local/include -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include  
GLIB_LIBS = -lglib-2.0  
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LEX = flex
LEXLIB = -lfl
LEX_OUTPUT_ROOT = lex.yy
LIBOBJS = 
LIBS = 
LN_S = ln -s
LTLIBOBJS = 
LUA_CFLAGS = -I/usr/include/lua5.1  
LUA_LIBS = -llua5.1  
MAINT = #
MAKEINFO = makeinfo
MKDIR_P = /bin/mkdir -p
MYSQL_CONFIG = /usr/local/webserver/mysql/bin/mysql_config
MYSQL_INCLUDE = -I/usr/local/webserver/mysql/include
MYSQL_LIBS = -L/usr/local/webserver/mysql/lib -lmysqlclient -lpthread -lm -ldl
MYSQL_TEST_BIN = /usr/local/webserver/mysql/bin/mysqltest
OBJEXT = o
PACKAGE = xxfs_dbproxy
PACKAGE_BUGREPORT = xxfs_dbproxy-devel@lists.sourceforge.net
PACKAGE_NAME = xxfs_dbproxy
PACKAGE_STRING = xxfs_dbproxy 0.8.7
PACKAGE_TARNAME = xxfs_dbproxy
PACKAGE_URL = 
PACKAGE_VERSION = 0.8.7
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
U = 
VERSION = 0.8.7
abs_builddir = /myreasearch/xxfs_dbproxy/src
abs_srcdir = /myreasearch/xxfs_dbproxy/src
abs_top_builddir = /myreasearch/xxfs_dbproxy
abs_top_srcdir = /myreasearch/xxfs_dbproxy
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /myreasearch/xxfs_dbproxy/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
xxfs_dbproxy_SOURCES = \
	xxfs_dbproxy.cpp \
	network-mysqld.cpp \
	network-mysqld-proto.cpp \
	network-mysqld-proxy.cpp \
	network-mysqld-server.cpp \
	network-mysqld-table.cpp \
	network-conn-pool.cpp  \
	network-socket.cpp \
	sql-tokenizer.l \
	glib-ext.cpp \
	mysql_wrapper.cpp \
	partition.cpp \
	sql-parser.cpp \
	perf_monitor.cpp \
	messages.cpp \
	resultset_merge.cpp

noinst_HEADERS = \
	network-mysqld.h \
	network-mysqld-proto.h \
	network-mysqld-proxy.h \
	network-conn-pool.h \
	network-socket.h \
	sys-pedantic.h \
	sql-tokenizer.h \
	glib-ext.h \
	mysql_wrapper.h \
	partition.h \
	sql-parser.h \
	perf_monitor.h \
	messages.h \
	resultset_merge.h

xxfs_dbproxy_CPPFLAGS = $(MYSQL_INCLUDE) $(GLIB_CFLAGS) $(LUA_CFLAGS)  -Wall
xxfs_dbproxy_LDADD = $(ENABLE_LINK_STATIC) $(EVENT_LIBS) $(GLIB_LIBS) $(LUA_LIBS) $(DISABLE_LINK_STATIC) $(MYSQL_LIBS)
xxfs_dbproxy_CFLAGS = -DLIBDIR="\"$(pkgdatadir)\"" 

# noinst_PROGRAMS=test-latency 
# test_latency_SOURCES=test-latency.c
# test_latency_CPPFLAGS= $(MYSQL_INCLUDE) $(GLIB_CFLAGS)
# test_latency_LDADD= $(MYSQL_LIBS) $(GLIB_LIBS)
EXTRA_DIST = CMakeLists.txt test-latency.c
all: all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .l .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnits src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnits src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-sbinPROGRAMS: $(sbin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(sbindir)" || $(MKDIR_P) "$(DESTDIR)$(sbindir)"
	@list='$(sbin_PROGRAMS)'; test -n "$(sbindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(sbindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(sbindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-sbinPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(sbin_PROGRAMS)'; test -n "$(sbindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(sbindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(sbindir)" && rm -f $$files

clean-sbinPROGRAMS:
	-test -z "$(sbin_PROGRAMS)" || rm -f $(sbin_PROGRAMS)

installcheck-sbinPROGRAMS: $(sbin_PROGRAMS)
	bad=0; pid=$$$$; list="$(sbin_PROGRAMS)"; for p in $$list; do \
	  case ' $(AM_INSTALLCHECK_STD_OPTIONS_EXEMPT) ' in \
	   *" $$p "* | *" $(srcdir)/$$p "*) continue;; \
	  esac; \
	  f=`echo "$$p" | \
	     sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  for opt in --help --version; do \
	    if "$(DESTDIR)$(sbindir)/$$f" $$opt >c$${pid}_.out \
	         2>c$${pid}_.err </dev/null \
		 && test -n "`cat c$${pid}_.out`" \
		 && test -z "`cat c$${pid}_.err`"; then :; \
	    else echo "$$f does not support $$opt" 1>&2; bad=1; fi; \
	  done; \
	done; rm -f c$${pid}_.???; exit $$bad
xxfs_dbproxy$(EXEEXT): $(xxfs_dbproxy_OBJECTS) $(xxfs_dbproxy_DEPENDENCIES) 
	@rm -f xxfs_dbproxy$(EXEEXT)
	$(CXXLINK) $(xxfs_dbproxy_OBJECTS) $(xxfs_dbproxy_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/xxfs_dbproxy-glib-ext.Po
include ./$(DEPDIR)/xxfs_dbproxy-messages.Po
include ./$(DEPDIR)/xxfs_dbproxy-mysql_wrapper.Po
include ./$(DEPDIR)/xxfs_dbproxy-network-conn-pool.Po
include ./$(DEPDIR)/xxfs_dbproxy-network-mysqld-proto.Po
include ./$(DEPDIR)/xxfs_dbproxy-network-mysqld-proxy.Po
include ./$(DEPDIR)/xxfs_dbproxy-network-mysqld-server.Po
include ./$(DEPDIR)/xxfs_dbproxy-network-mysqld-table.Po
include ./$(DEPDIR)/xxfs_dbproxy-network-mysqld.Po
include ./$(DEPDIR)/xxfs_dbproxy-network-socket.Po
include ./$(DEPDIR)/xxfs_dbproxy-partition.Po
include ./$(DEPDIR)/xxfs_dbproxy-perf_monitor.Po
include ./$(DEPDIR)/xxfs_dbproxy-resultset_merge.Po
include ./$(DEPDIR)/xxfs_dbproxy-xxfs_dbproxy.Po
include ./$(DEPDIR)/xxfs_dbproxy-sql-parser.Po
include ./$(DEPDIR)/xxfs_dbproxy-sql-tokenizer.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

xxfs_dbproxy-sql-tokenizer.o: sql-tokenizer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(xxfs_dbproxy_CFLAGS) $(CFLAGS) -MT xxfs_dbproxy-sql-tokenizer.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-sql-tokenizer.Tpo -c -o xxfs_dbproxy-sql-tokenizer.o `test -f 'sql-tokenizer.c' || echo '$(srcdir)/'`sql-tokenizer.c
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-sql-tokenizer.Tpo $(DEPDIR)/xxfs_dbproxy-sql-tokenizer.Po
#	source='sql-tokenizer.c' object='xxfs_dbproxy-sql-tokenizer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(xxfs_dbproxy_CFLAGS) $(CFLAGS) -c -o xxfs_dbproxy-sql-tokenizer.o `test -f 'sql-tokenizer.c' || echo '$(srcdir)/'`sql-tokenizer.c

xxfs_dbproxy-sql-tokenizer.obj: sql-tokenizer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(xxfs_dbproxy_CFLAGS) $(CFLAGS) -MT xxfs_dbproxy-sql-tokenizer.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-sql-tokenizer.Tpo -c -o xxfs_dbproxy-sql-tokenizer.obj `if test -f 'sql-tokenizer.c'; then $(CYGPATH_W) 'sql-tokenizer.c'; else $(CYGPATH_W) '$(srcdir)/sql-tokenizer.c'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-sql-tokenizer.Tpo $(DEPDIR)/xxfs_dbproxy-sql-tokenizer.Po
#	source='sql-tokenizer.c' object='xxfs_dbproxy-sql-tokenizer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(xxfs_dbproxy_CFLAGS) $(CFLAGS) -c -o xxfs_dbproxy-sql-tokenizer.obj `if test -f 'sql-tokenizer.c'; then $(CYGPATH_W) 'sql-tokenizer.c'; else $(CYGPATH_W) '$(srcdir)/sql-tokenizer.c'; fi`

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

xxfs_dbproxy-xxfs_dbproxy.o: xxfs_dbproxy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-xxfs_dbproxy.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-xxfs_dbproxy.Tpo -c -o xxfs_dbproxy-xxfs_dbproxy.o `test -f 'xxfs_dbproxy.cpp' || echo '$(srcdir)/'`xxfs_dbproxy.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-xxfs_dbproxy.Tpo $(DEPDIR)/xxfs_dbproxy-xxfs_dbproxy.Po
#	source='xxfs_dbproxy.cpp' object='xxfs_dbproxy-xxfs_dbproxy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-xxfs_dbproxy.o `test -f 'xxfs_dbproxy.cpp' || echo '$(srcdir)/'`xxfs_dbproxy.cpp

xxfs_dbproxy-xxfs_dbproxy.obj: xxfs_dbproxy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-xxfs_dbproxy.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-xxfs_dbproxy.Tpo -c -o xxfs_dbproxy-xxfs_dbproxy.obj `if test -f 'xxfs_dbproxy.cpp'; then $(CYGPATH_W) 'xxfs_dbproxy.cpp'; else $(CYGPATH_W) '$(srcdir)/xxfs_dbproxy.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-xxfs_dbproxy.Tpo $(DEPDIR)/xxfs_dbproxy-xxfs_dbproxy.Po
#	source='xxfs_dbproxy.cpp' object='xxfs_dbproxy-xxfs_dbproxy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-xxfs_dbproxy.obj `if test -f 'xxfs_dbproxy.cpp'; then $(CYGPATH_W) 'xxfs_dbproxy.cpp'; else $(CYGPATH_W) '$(srcdir)/xxfs_dbproxy.cpp'; fi`

xxfs_dbproxy-network-mysqld.o: network-mysqld.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld.Tpo -c -o xxfs_dbproxy-network-mysqld.o `test -f 'network-mysqld.cpp' || echo '$(srcdir)/'`network-mysqld.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld.Po
#	source='network-mysqld.cpp' object='xxfs_dbproxy-network-mysqld.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld.o `test -f 'network-mysqld.cpp' || echo '$(srcdir)/'`network-mysqld.cpp

xxfs_dbproxy-network-mysqld.obj: network-mysqld.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld.Tpo -c -o xxfs_dbproxy-network-mysqld.obj `if test -f 'network-mysqld.cpp'; then $(CYGPATH_W) 'network-mysqld.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld.Po
#	source='network-mysqld.cpp' object='xxfs_dbproxy-network-mysqld.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld.obj `if test -f 'network-mysqld.cpp'; then $(CYGPATH_W) 'network-mysqld.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld.cpp'; fi`

xxfs_dbproxy-network-mysqld-proto.o: network-mysqld-proto.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld-proto.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld-proto.Tpo -c -o xxfs_dbproxy-network-mysqld-proto.o `test -f 'network-mysqld-proto.cpp' || echo '$(srcdir)/'`network-mysqld-proto.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld-proto.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld-proto.Po
#	source='network-mysqld-proto.cpp' object='xxfs_dbproxy-network-mysqld-proto.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld-proto.o `test -f 'network-mysqld-proto.cpp' || echo '$(srcdir)/'`network-mysqld-proto.cpp

xxfs_dbproxy-network-mysqld-proto.obj: network-mysqld-proto.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld-proto.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld-proto.Tpo -c -o xxfs_dbproxy-network-mysqld-proto.obj `if test -f 'network-mysqld-proto.cpp'; then $(CYGPATH_W) 'network-mysqld-proto.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld-proto.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld-proto.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld-proto.Po
#	source='network-mysqld-proto.cpp' object='xxfs_dbproxy-network-mysqld-proto.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld-proto.obj `if test -f 'network-mysqld-proto.cpp'; then $(CYGPATH_W) 'network-mysqld-proto.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld-proto.cpp'; fi`

xxfs_dbproxy-network-mysqld-proxy.o: network-mysqld-proxy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld-proxy.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld-proxy.Tpo -c -o xxfs_dbproxy-network-mysqld-proxy.o `test -f 'network-mysqld-proxy.cpp' || echo '$(srcdir)/'`network-mysqld-proxy.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld-proxy.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld-proxy.Po
#	source='network-mysqld-proxy.cpp' object='xxfs_dbproxy-network-mysqld-proxy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld-proxy.o `test -f 'network-mysqld-proxy.cpp' || echo '$(srcdir)/'`network-mysqld-proxy.cpp

xxfs_dbproxy-network-mysqld-proxy.obj: network-mysqld-proxy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld-proxy.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld-proxy.Tpo -c -o xxfs_dbproxy-network-mysqld-proxy.obj `if test -f 'network-mysqld-proxy.cpp'; then $(CYGPATH_W) 'network-mysqld-proxy.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld-proxy.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld-proxy.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld-proxy.Po
#	source='network-mysqld-proxy.cpp' object='xxfs_dbproxy-network-mysqld-proxy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld-proxy.obj `if test -f 'network-mysqld-proxy.cpp'; then $(CYGPATH_W) 'network-mysqld-proxy.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld-proxy.cpp'; fi`

xxfs_dbproxy-network-mysqld-server.o: network-mysqld-server.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld-server.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld-server.Tpo -c -o xxfs_dbproxy-network-mysqld-server.o `test -f 'network-mysqld-server.cpp' || echo '$(srcdir)/'`network-mysqld-server.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld-server.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld-server.Po
#	source='network-mysqld-server.cpp' object='xxfs_dbproxy-network-mysqld-server.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld-server.o `test -f 'network-mysqld-server.cpp' || echo '$(srcdir)/'`network-mysqld-server.cpp

xxfs_dbproxy-network-mysqld-server.obj: network-mysqld-server.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld-server.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld-server.Tpo -c -o xxfs_dbproxy-network-mysqld-server.obj `if test -f 'network-mysqld-server.cpp'; then $(CYGPATH_W) 'network-mysqld-server.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld-server.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld-server.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld-server.Po
#	source='network-mysqld-server.cpp' object='xxfs_dbproxy-network-mysqld-server.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld-server.obj `if test -f 'network-mysqld-server.cpp'; then $(CYGPATH_W) 'network-mysqld-server.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld-server.cpp'; fi`

xxfs_dbproxy-network-mysqld-table.o: network-mysqld-table.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld-table.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld-table.Tpo -c -o xxfs_dbproxy-network-mysqld-table.o `test -f 'network-mysqld-table.cpp' || echo '$(srcdir)/'`network-mysqld-table.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld-table.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld-table.Po
#	source='network-mysqld-table.cpp' object='xxfs_dbproxy-network-mysqld-table.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld-table.o `test -f 'network-mysqld-table.cpp' || echo '$(srcdir)/'`network-mysqld-table.cpp

xxfs_dbproxy-network-mysqld-table.obj: network-mysqld-table.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-mysqld-table.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-mysqld-table.Tpo -c -o xxfs_dbproxy-network-mysqld-table.obj `if test -f 'network-mysqld-table.cpp'; then $(CYGPATH_W) 'network-mysqld-table.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld-table.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-mysqld-table.Tpo $(DEPDIR)/xxfs_dbproxy-network-mysqld-table.Po
#	source='network-mysqld-table.cpp' object='xxfs_dbproxy-network-mysqld-table.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-mysqld-table.obj `if test -f 'network-mysqld-table.cpp'; then $(CYGPATH_W) 'network-mysqld-table.cpp'; else $(CYGPATH_W) '$(srcdir)/network-mysqld-table.cpp'; fi`

xxfs_dbproxy-network-conn-pool.o: network-conn-pool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-conn-pool.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-conn-pool.Tpo -c -o xxfs_dbproxy-network-conn-pool.o `test -f 'network-conn-pool.cpp' || echo '$(srcdir)/'`network-conn-pool.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-conn-pool.Tpo $(DEPDIR)/xxfs_dbproxy-network-conn-pool.Po
#	source='network-conn-pool.cpp' object='xxfs_dbproxy-network-conn-pool.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-conn-pool.o `test -f 'network-conn-pool.cpp' || echo '$(srcdir)/'`network-conn-pool.cpp

xxfs_dbproxy-network-conn-pool.obj: network-conn-pool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-conn-pool.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-conn-pool.Tpo -c -o xxfs_dbproxy-network-conn-pool.obj `if test -f 'network-conn-pool.cpp'; then $(CYGPATH_W) 'network-conn-pool.cpp'; else $(CYGPATH_W) '$(srcdir)/network-conn-pool.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-conn-pool.Tpo $(DEPDIR)/xxfs_dbproxy-network-conn-pool.Po
#	source='network-conn-pool.cpp' object='xxfs_dbproxy-network-conn-pool.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-conn-pool.obj `if test -f 'network-conn-pool.cpp'; then $(CYGPATH_W) 'network-conn-pool.cpp'; else $(CYGPATH_W) '$(srcdir)/network-conn-pool.cpp'; fi`

xxfs_dbproxy-network-socket.o: network-socket.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-socket.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-socket.Tpo -c -o xxfs_dbproxy-network-socket.o `test -f 'network-socket.cpp' || echo '$(srcdir)/'`network-socket.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-socket.Tpo $(DEPDIR)/xxfs_dbproxy-network-socket.Po
#	source='network-socket.cpp' object='xxfs_dbproxy-network-socket.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-socket.o `test -f 'network-socket.cpp' || echo '$(srcdir)/'`network-socket.cpp

xxfs_dbproxy-network-socket.obj: network-socket.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-network-socket.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-network-socket.Tpo -c -o xxfs_dbproxy-network-socket.obj `if test -f 'network-socket.cpp'; then $(CYGPATH_W) 'network-socket.cpp'; else $(CYGPATH_W) '$(srcdir)/network-socket.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-network-socket.Tpo $(DEPDIR)/xxfs_dbproxy-network-socket.Po
#	source='network-socket.cpp' object='xxfs_dbproxy-network-socket.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-network-socket.obj `if test -f 'network-socket.cpp'; then $(CYGPATH_W) 'network-socket.cpp'; else $(CYGPATH_W) '$(srcdir)/network-socket.cpp'; fi`

xxfs_dbproxy-glib-ext.o: glib-ext.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-glib-ext.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-glib-ext.Tpo -c -o xxfs_dbproxy-glib-ext.o `test -f 'glib-ext.cpp' || echo '$(srcdir)/'`glib-ext.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-glib-ext.Tpo $(DEPDIR)/xxfs_dbproxy-glib-ext.Po
#	source='glib-ext.cpp' object='xxfs_dbproxy-glib-ext.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-glib-ext.o `test -f 'glib-ext.cpp' || echo '$(srcdir)/'`glib-ext.cpp

xxfs_dbproxy-glib-ext.obj: glib-ext.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-glib-ext.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-glib-ext.Tpo -c -o xxfs_dbproxy-glib-ext.obj `if test -f 'glib-ext.cpp'; then $(CYGPATH_W) 'glib-ext.cpp'; else $(CYGPATH_W) '$(srcdir)/glib-ext.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-glib-ext.Tpo $(DEPDIR)/xxfs_dbproxy-glib-ext.Po
#	source='glib-ext.cpp' object='xxfs_dbproxy-glib-ext.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-glib-ext.obj `if test -f 'glib-ext.cpp'; then $(CYGPATH_W) 'glib-ext.cpp'; else $(CYGPATH_W) '$(srcdir)/glib-ext.cpp'; fi`

xxfs_dbproxy-mysql_wrapper.o: mysql_wrapper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-mysql_wrapper.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-mysql_wrapper.Tpo -c -o xxfs_dbproxy-mysql_wrapper.o `test -f 'mysql_wrapper.cpp' || echo '$(srcdir)/'`mysql_wrapper.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-mysql_wrapper.Tpo $(DEPDIR)/xxfs_dbproxy-mysql_wrapper.Po
#	source='mysql_wrapper.cpp' object='xxfs_dbproxy-mysql_wrapper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-mysql_wrapper.o `test -f 'mysql_wrapper.cpp' || echo '$(srcdir)/'`mysql_wrapper.cpp

xxfs_dbproxy-mysql_wrapper.obj: mysql_wrapper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-mysql_wrapper.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-mysql_wrapper.Tpo -c -o xxfs_dbproxy-mysql_wrapper.obj `if test -f 'mysql_wrapper.cpp'; then $(CYGPATH_W) 'mysql_wrapper.cpp'; else $(CYGPATH_W) '$(srcdir)/mysql_wrapper.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-mysql_wrapper.Tpo $(DEPDIR)/xxfs_dbproxy-mysql_wrapper.Po
#	source='mysql_wrapper.cpp' object='xxfs_dbproxy-mysql_wrapper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-mysql_wrapper.obj `if test -f 'mysql_wrapper.cpp'; then $(CYGPATH_W) 'mysql_wrapper.cpp'; else $(CYGPATH_W) '$(srcdir)/mysql_wrapper.cpp'; fi`

xxfs_dbproxy-partition.o: partition.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-partition.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-partition.Tpo -c -o xxfs_dbproxy-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-partition.Tpo $(DEPDIR)/xxfs_dbproxy-partition.Po
#	source='partition.cpp' object='xxfs_dbproxy-partition.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp

xxfs_dbproxy-partition.obj: partition.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-partition.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-partition.Tpo -c -o xxfs_dbproxy-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-partition.Tpo $(DEPDIR)/xxfs_dbproxy-partition.Po
#	source='partition.cpp' object='xxfs_dbproxy-partition.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`

xxfs_dbproxy-sql-parser.o: sql-parser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-sql-parser.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-sql-parser.Tpo -c -o xxfs_dbproxy-sql-parser.o `test -f 'sql-parser.cpp' || echo '$(srcdir)/'`sql-parser.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-sql-parser.Tpo $(DEPDIR)/xxfs_dbproxy-sql-parser.Po
#	source='sql-parser.cpp' object='xxfs_dbproxy-sql-parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-sql-parser.o `test -f 'sql-parser.cpp' || echo '$(srcdir)/'`sql-parser.cpp

xxfs_dbproxy-sql-parser.obj: sql-parser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-sql-parser.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-sql-parser.Tpo -c -o xxfs_dbproxy-sql-parser.obj `if test -f 'sql-parser.cpp'; then $(CYGPATH_W) 'sql-parser.cpp'; else $(CYGPATH_W) '$(srcdir)/sql-parser.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-sql-parser.Tpo $(DEPDIR)/xxfs_dbproxy-sql-parser.Po
#	source='sql-parser.cpp' object='xxfs_dbproxy-sql-parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-sql-parser.obj `if test -f 'sql-parser.cpp'; then $(CYGPATH_W) 'sql-parser.cpp'; else $(CYGPATH_W) '$(srcdir)/sql-parser.cpp'; fi`

xxfs_dbproxy-perf_monitor.o: perf_monitor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-perf_monitor.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-perf_monitor.Tpo -c -o xxfs_dbproxy-perf_monitor.o `test -f 'perf_monitor.cpp' || echo '$(srcdir)/'`perf_monitor.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-perf_monitor.Tpo $(DEPDIR)/xxfs_dbproxy-perf_monitor.Po
#	source='perf_monitor.cpp' object='xxfs_dbproxy-perf_monitor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-perf_monitor.o `test -f 'perf_monitor.cpp' || echo '$(srcdir)/'`perf_monitor.cpp

xxfs_dbproxy-perf_monitor.obj: perf_monitor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-perf_monitor.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-perf_monitor.Tpo -c -o xxfs_dbproxy-perf_monitor.obj `if test -f 'perf_monitor.cpp'; then $(CYGPATH_W) 'perf_monitor.cpp'; else $(CYGPATH_W) '$(srcdir)/perf_monitor.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-perf_monitor.Tpo $(DEPDIR)/xxfs_dbproxy-perf_monitor.Po
#	source='perf_monitor.cpp' object='xxfs_dbproxy-perf_monitor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-perf_monitor.obj `if test -f 'perf_monitor.cpp'; then $(CYGPATH_W) 'perf_monitor.cpp'; else $(CYGPATH_W) '$(srcdir)/perf_monitor.cpp'; fi`

xxfs_dbproxy-messages.o: messages.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-messages.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-messages.Tpo -c -o xxfs_dbproxy-messages.o `test -f 'messages.cpp' || echo '$(srcdir)/'`messages.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-messages.Tpo $(DEPDIR)/xxfs_dbproxy-messages.Po
#	source='messages.cpp' object='xxfs_dbproxy-messages.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-messages.o `test -f 'messages.cpp' || echo '$(srcdir)/'`messages.cpp

xxfs_dbproxy-messages.obj: messages.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-messages.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-messages.Tpo -c -o xxfs_dbproxy-messages.obj `if test -f 'messages.cpp'; then $(CYGPATH_W) 'messages.cpp'; else $(CYGPATH_W) '$(srcdir)/messages.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-messages.Tpo $(DEPDIR)/xxfs_dbproxy-messages.Po
#	source='messages.cpp' object='xxfs_dbproxy-messages.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-messages.obj `if test -f 'messages.cpp'; then $(CYGPATH_W) 'messages.cpp'; else $(CYGPATH_W) '$(srcdir)/messages.cpp'; fi`

xxfs_dbproxy-resultset_merge.o: resultset_merge.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-resultset_merge.o -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-resultset_merge.Tpo -c -o xxfs_dbproxy-resultset_merge.o `test -f 'resultset_merge.cpp' || echo '$(srcdir)/'`resultset_merge.cpp
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-resultset_merge.Tpo $(DEPDIR)/xxfs_dbproxy-resultset_merge.Po
#	source='resultset_merge.cpp' object='xxfs_dbproxy-resultset_merge.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-resultset_merge.o `test -f 'resultset_merge.cpp' || echo '$(srcdir)/'`resultset_merge.cpp

xxfs_dbproxy-resultset_merge.obj: resultset_merge.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xxfs_dbproxy-resultset_merge.obj -MD -MP -MF $(DEPDIR)/xxfs_dbproxy-resultset_merge.Tpo -c -o xxfs_dbproxy-resultset_merge.obj `if test -f 'resultset_merge.cpp'; then $(CYGPATH_W) 'resultset_merge.cpp'; else $(CYGPATH_W) '$(srcdir)/resultset_merge.cpp'; fi`
	$(am__mv) $(DEPDIR)/xxfs_dbproxy-resultset_merge.Tpo $(DEPDIR)/xxfs_dbproxy-resultset_merge.Po
#	source='resultset_merge.cpp' object='xxfs_dbproxy-resultset_merge.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xxfs_dbproxy_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xxfs_dbproxy-resultset_merge.obj `if test -f 'resultset_merge.cpp'; then $(CYGPATH_W) 'resultset_merge.cpp'; else $(CYGPATH_W) '$(srcdir)/resultset_merge.cpp'; fi`

.l.c:
	$(am__skiplex) $(SHELL) $(YLWRAP) $< $(LEX_OUTPUT_ROOT).c $@ -- $(LEXCOMPILE)

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(sbindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-rm -f sql-tokenizer.c
clean: clean-am

clean-am: clean-generic clean-sbinPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-sbinPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am: installcheck-sbinPROGRAMS

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-sbinPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-sbinPROGRAMS ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-sbinPROGRAMS install-strip \
	installcheck installcheck-am installcheck-sbinPROGRAMS \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
	ps ps-am tags uninstall uninstall-am uninstall-sbinPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
